setwd("AMP_PD/")
METADATA_PATH = file.path("Metadata/metadata_final.xlsx")
DEMULTIPLEX_FILE_PATH = "conversion_vir_w_gt2_w_sex_161Pools_04112024_v3.tsv"
{
# Clinical metadata
wb = loadWorkbook(METADATA_PATH)
cols = c("Demographics", "PD_Medical_History", "Epworth_Sleepiness_Scale", "Family_History_PD", "LBD_Cohort_Clinical_Data", "LBD_Cohort_Path_Data", "MDS_UPDRS_Part_I",
"MDS_UPDRS_Part_III", "MDS_UPDRS_Part_IV", "MMSE", "Modified_Schwab___England_ADL", "Smoking_and_alcohol_history", "UPDRS")
all_tabs = list()
for(col in cols) {
all_tabs[[col]] = readWorksheet(wb, sheet=col)
}
allInfo = data.table(cbind.data.frame(
all_tabs$Demographics,
do.call("rbind.data.frame", lapply(all_tabs$Demographics$participant_id, function(id) {
x = all_tabs$PD_Medical_History[all_tabs$PD_Medical_History$participant_id == id,]
x[order(x$visit_month, decreasing=T)[1],]
})),
do.call("rbind.data.frame", lapply(all_tabs$Demographics$participant_id, function(id) {
x = all_tabs$UPDRS[all_tabs$UPDRS$participant_id == id,]
x[order(x$visit_month, decreasing=T)[1],]
})),
do.call("rbind.data.frame", lapply(all_tabs$Demographics$participant_id, function(id) {
x = all_tabs$MDS_UPDRS_Part_III[all_tabs$MDS_UPDRS_Part_III$participant_id == id,]
x[order(x$visit_month, decreasing=T)[1],]
})),
all_tabs$LBD_Cohort_Path_Data[match(all_tabs$Demographics$participant_id,all_tabs$LBD_Cohort_Path_Data$participant_id),]
))
allInfo$path_braak_lb = as.numeric(ifelse(is.na(allInfo$path_braak_lb) | (allInfo$path_braak_lb == "NA"), 0, allInfo$path_braak_lb))
allInfo$brain_bank = as.factor(allInfo$brain_bank)
allInfo$diagnosis_final = ifelse(is.na(allInfo$diagnosis), allInfo$initial_diagnosis, allInfo$diagnosis)
allInfo$diagnosis_final = ifelse(allInfo$diagnosis_final == "No PD Nor Other Neurological Disorder", "Control", "PD or Parkinsonism")
allInfo$diagnosis_final = as.factor(allInfo$diagnosis_final)
allInfo$braak_email = as.numeric(ifelse(is.na(allInfo$path_braak_lb) | (allInfo$path_braak_lb == "NA"), 0, allInfo$path_braak_lb))
allInfo = allInfo[!is.na(allInfo$participant_id),]
allInfoDf = data.frame(allInfo)[,!duplicated(colnames(allInfo))]
allInfoDf = allInfoDf[!is.na(allInfoDf$participant_id),]
dim(allInfo)
######
# Remove the donors for which we don't have any participant
EXPORTED_SAMPLES_SNRNASEQ = "~/mnt/arion/projects/CommonMind/amppd/snRNAseq/metadata/snRNAseq_Data_Transfer_Manifest_snRNAseq_Individual.csv"
CONVERTER_IDS = "~/mnt/arion/projects/CommonMind/amppd/snRNAseq/metadata/snRNAseq_convertor_sampleNames.csv"
FINAL_H5AD_DF = "~/mnt/arion/projects/CommonMind/pnm/AMP_PD/Tereza_AllSamp_04112024.csv"
exportedSnrnaseqSamples = read.csv(EXPORTED_SAMPLES_SNRNASEQ)
unique(exportedSnrnaseqSamples$AMP.PD.Participant.ID)
convertorsIds = read.csv(CONVERTER_IDS)
unique(exportedSnrnaseqSamples$AMP.PD.Participant.ID)
allowed = read.csv(FINAL_H5AD_DF)
unique(allowed$participant_id)
allInfo$participant_id_amppd = convertorsIds[match(allInfo$participant_id, convertorsIds$participant_id), "participant_id.1"]
allInfo = allInfo[allInfo$participant_id_amppd %in% unique(allowed$participant_id),]
######
# Alignment/demultiplexing metadata
notRmSamplesDf = read.csv(DEMULTIPLEX_FILE_PATH, sep="\t")
notRmSamplesDf = notRmSamplesDf[notRmSamplesDf$donor != "",]
notRmSamplesDf$combo = paste0(notRmSamplesDf$final_vcfID, "_", notRmSamplesDf$Final_breg)
notRmSamplesDf = do.call("rbind.data.frame", lapply(unique(notRmSamplesDf$combo), function(x) { c(x, sum(notRmSamplesDf[notRmSamplesDf$combo==x,"cell_counts"])) }))
colnames(notRmSamplesDf) = c("combo", "cell_count")
notRmSamplesDf$cell_count = as.numeric(notRmSamplesDf$cell_count)
# notRmSamplesDf$removed = "FALSE"
notRmSamplesDf$removed = "kept"
notRmSamplesDf$brain_region = sapply(notRmSamplesDf$combo, function(combo) { ifelse(grepl(combo, pattern="BM-17"), "PVC", ifelse(grepl(combo, pattern="BM-4"),
"PMC", ifelse(grepl(combo, pattern="10N"), "DMNX", ifelse(grepl(combo, pattern="GPI", ignore.case=T), "GPI", ifelse(grepl(combo, pattern="BM-9"), "PFC", combo))))) })
rmSamplesDf = read.csv(DEMULTIPLEX_FILE_PATH, sep="\t")
rmSamplesDf = rmSamplesDf[rmSamplesDf$donor == "",]
#hist(rmSamplesDf$cell_counts, breaks=50)
rmSamplesDf$combo = paste0(rmSamplesDf$final_vcfID, "_", rmSamplesDf$Final_breg)
rmSamplesDf = do.call("rbind.data.frame", lapply(unique(rmSamplesDf$combo), function(x) { c(x, sum(rmSamplesDf[rmSamplesDf$combo==x,"vir_res"])) }))
colnames(rmSamplesDf) = c("combo", "cell_count")
# rmSamplesDf$removed = "TRUE"
rmSamplesDf$removed = "removed"
rmSamplesDf$brain_region = sapply(rmSamplesDf$combo, function(combo) { ifelse(grepl(combo, pattern="BM-17"), "PVC", ifelse(grepl(combo, pattern="BM-4"),
"PMC", ifelse(grepl(combo, pattern="10N"), "DMNX", ifelse(grepl(combo, pattern="GPI", ignore.case=T), "GPI", ifelse(grepl(combo, pattern="BM-9"), "PFC", combo))))) })
filtSamplesDf = read.csv(DEMULTIPLEX_FILE_PATH, sep="\t")
filtSamplesDf = filtSamplesDf[filtSamplesDf$donor != "",]
#hist(filtSamplesDf$cell_counts, breaks=50)
filtSamplesDf$combo = paste0(filtSamplesDf$final_vcfID, "_", filtSamplesDf$Final_breg)
filtSamplesDf = do.call("rbind.data.frame", lapply(unique(filtSamplesDf$combo), function(x) { c(x, sum(filtSamplesDf[filtSamplesDf$combo==x,"Lost_cells"])) }))
colnames(filtSamplesDf) = c("combo", "cell_count")
filtSamplesDf$removed = "filtered"
filtSamplesDf$brain_region = sapply(filtSamplesDf$combo, function(combo) { ifelse(grepl(combo, pattern="BM-17"), "PVC", ifelse(grepl(combo, pattern="BM-4"),
"PMC", ifelse(grepl(combo, pattern="10N"), "DMNX", ifelse(grepl(combo, pattern="GPI", ignore.case=T), "GPI", ifelse(grepl(combo, pattern="BM-9"), "PFC", combo))))) })
# For UPSET PLOT
notRmSamplesDf2 = read.csv(DEMULTIPLEX_FILE_PATH, sep="\t")
notRmSamplesDf2 = notRmSamplesDf2[notRmSamplesDf2$donor != "",]
notRmSamplesDf2$brain_region = sapply(notRmSamplesDf2$Final_breg, function(combo) {
ifelse(grepl(combo, pattern="BM-17"), "PVC",
ifelse(grepl(combo, pattern="BM-4"), "PMC",
ifelse(grepl(combo, pattern="10N"), "DMNX",
ifelse(grepl(combo, pattern="GPI", ignore.case=T), "GPI",
ifelse(grepl(combo, pattern="BM-9"), "PFC", combo)))))
})
notRmSamplesDf2 = notRmSamplesDf2[, c('final_vcfID', 'brain_region')]
notRmSamplesDf2 = notRmSamplesDf2[!duplicated(notRmSamplesDf2),]
}
# Plot: Race
allInfoDf$race = as.factor(allInfoDf$race)
# df = allInfoDf[, .N, by = race]
df = allInfoDf %>% count(race)
df
METADATA_PATH = file.path("metadata_final.xlsx")
{
# Clinical metadata
wb = loadWorkbook(METADATA_PATH)
cols = c("Demographics", "PD_Medical_History", "Epworth_Sleepiness_Scale", "Family_History_PD", "LBD_Cohort_Clinical_Data", "LBD_Cohort_Path_Data", "MDS_UPDRS_Part_I",
"MDS_UPDRS_Part_III", "MDS_UPDRS_Part_IV", "MMSE", "Modified_Schwab___England_ADL", "Smoking_and_alcohol_history", "UPDRS")
all_tabs = list()
for(col in cols) {
all_tabs[[col]] = readWorksheet(wb, sheet=col)
}
allInfo = data.table(cbind.data.frame(
all_tabs$Demographics,
do.call("rbind.data.frame", lapply(all_tabs$Demographics$participant_id, function(id) {
x = all_tabs$PD_Medical_History[all_tabs$PD_Medical_History$participant_id == id,]
x[order(x$visit_month, decreasing=T)[1],]
})),
do.call("rbind.data.frame", lapply(all_tabs$Demographics$participant_id, function(id) {
x = all_tabs$UPDRS[all_tabs$UPDRS$participant_id == id,]
x[order(x$visit_month, decreasing=T)[1],]
})),
do.call("rbind.data.frame", lapply(all_tabs$Demographics$participant_id, function(id) {
x = all_tabs$MDS_UPDRS_Part_III[all_tabs$MDS_UPDRS_Part_III$participant_id == id,]
x[order(x$visit_month, decreasing=T)[1],]
})),
all_tabs$LBD_Cohort_Path_Data[match(all_tabs$Demographics$participant_id,all_tabs$LBD_Cohort_Path_Data$participant_id),]
))
allInfo$path_braak_lb = as.numeric(ifelse(is.na(allInfo$path_braak_lb) | (allInfo$path_braak_lb == "NA"), 0, allInfo$path_braak_lb))
allInfo$brain_bank = as.factor(allInfo$brain_bank)
allInfo$diagnosis_final = ifelse(is.na(allInfo$diagnosis), allInfo$initial_diagnosis, allInfo$diagnosis)
allInfo$diagnosis_final = ifelse(allInfo$diagnosis_final == "No PD Nor Other Neurological Disorder", "Control", "PD or Parkinsonism")
allInfo$diagnosis_final = as.factor(allInfo$diagnosis_final)
allInfo$braak_email = as.numeric(ifelse(is.na(allInfo$path_braak_lb) | (allInfo$path_braak_lb == "NA"), 0, allInfo$path_braak_lb))
allInfo = allInfo[!is.na(allInfo$participant_id),]
allInfoDf = data.frame(allInfo)[,!duplicated(colnames(allInfo))]
allInfoDf = allInfoDf[!is.na(allInfoDf$participant_id),]
dim(allInfo)
######
# Remove the donors for which we don't have any participant
EXPORTED_SAMPLES_SNRNASEQ = "~/mnt/arion/projects/CommonMind/amppd/snRNAseq/metadata/snRNAseq_Data_Transfer_Manifest_snRNAseq_Individual.csv"
CONVERTER_IDS = "~/mnt/arion/projects/CommonMind/amppd/snRNAseq/metadata/snRNAseq_convertor_sampleNames.csv"
FINAL_H5AD_DF = "~/mnt/arion/projects/CommonMind/pnm/AMP_PD/Tereza_AllSamp_04112024.csv"
exportedSnrnaseqSamples = read.csv(EXPORTED_SAMPLES_SNRNASEQ)
unique(exportedSnrnaseqSamples$AMP.PD.Participant.ID)
convertorsIds = read.csv(CONVERTER_IDS)
unique(exportedSnrnaseqSamples$AMP.PD.Participant.ID)
allowed = read.csv(FINAL_H5AD_DF)
unique(allowed$participant_id)
allInfo$participant_id_amppd = convertorsIds[match(allInfo$participant_id, convertorsIds$participant_id), "participant_id.1"]
allInfo = allInfo[allInfo$participant_id_amppd %in% unique(allowed$participant_id),]
######
# Alignment/demultiplexing metadata
notRmSamplesDf = read.csv(DEMULTIPLEX_FILE_PATH, sep="\t")
notRmSamplesDf = notRmSamplesDf[notRmSamplesDf$donor != "",]
notRmSamplesDf$combo = paste0(notRmSamplesDf$final_vcfID, "_", notRmSamplesDf$Final_breg)
notRmSamplesDf = do.call("rbind.data.frame", lapply(unique(notRmSamplesDf$combo), function(x) { c(x, sum(notRmSamplesDf[notRmSamplesDf$combo==x,"cell_counts"])) }))
colnames(notRmSamplesDf) = c("combo", "cell_count")
notRmSamplesDf$cell_count = as.numeric(notRmSamplesDf$cell_count)
# notRmSamplesDf$removed = "FALSE"
notRmSamplesDf$removed = "kept"
notRmSamplesDf$brain_region = sapply(notRmSamplesDf$combo, function(combo) { ifelse(grepl(combo, pattern="BM-17"), "PVC", ifelse(grepl(combo, pattern="BM-4"),
"PMC", ifelse(grepl(combo, pattern="10N"), "DMNX", ifelse(grepl(combo, pattern="GPI", ignore.case=T), "GPI", ifelse(grepl(combo, pattern="BM-9"), "PFC", combo))))) })
rmSamplesDf = read.csv(DEMULTIPLEX_FILE_PATH, sep="\t")
rmSamplesDf = rmSamplesDf[rmSamplesDf$donor == "",]
#hist(rmSamplesDf$cell_counts, breaks=50)
rmSamplesDf$combo = paste0(rmSamplesDf$final_vcfID, "_", rmSamplesDf$Final_breg)
rmSamplesDf = do.call("rbind.data.frame", lapply(unique(rmSamplesDf$combo), function(x) { c(x, sum(rmSamplesDf[rmSamplesDf$combo==x,"vir_res"])) }))
colnames(rmSamplesDf) = c("combo", "cell_count")
# rmSamplesDf$removed = "TRUE"
rmSamplesDf$removed = "removed"
rmSamplesDf$brain_region = sapply(rmSamplesDf$combo, function(combo) { ifelse(grepl(combo, pattern="BM-17"), "PVC", ifelse(grepl(combo, pattern="BM-4"),
"PMC", ifelse(grepl(combo, pattern="10N"), "DMNX", ifelse(grepl(combo, pattern="GPI", ignore.case=T), "GPI", ifelse(grepl(combo, pattern="BM-9"), "PFC", combo))))) })
filtSamplesDf = read.csv(DEMULTIPLEX_FILE_PATH, sep="\t")
filtSamplesDf = filtSamplesDf[filtSamplesDf$donor != "",]
#hist(filtSamplesDf$cell_counts, breaks=50)
filtSamplesDf$combo = paste0(filtSamplesDf$final_vcfID, "_", filtSamplesDf$Final_breg)
filtSamplesDf = do.call("rbind.data.frame", lapply(unique(filtSamplesDf$combo), function(x) { c(x, sum(filtSamplesDf[filtSamplesDf$combo==x,"Lost_cells"])) }))
colnames(filtSamplesDf) = c("combo", "cell_count")
filtSamplesDf$removed = "filtered"
filtSamplesDf$brain_region = sapply(filtSamplesDf$combo, function(combo) { ifelse(grepl(combo, pattern="BM-17"), "PVC", ifelse(grepl(combo, pattern="BM-4"),
"PMC", ifelse(grepl(combo, pattern="10N"), "DMNX", ifelse(grepl(combo, pattern="GPI", ignore.case=T), "GPI", ifelse(grepl(combo, pattern="BM-9"), "PFC", combo))))) })
# For UPSET PLOT
notRmSamplesDf2 = read.csv(DEMULTIPLEX_FILE_PATH, sep="\t")
notRmSamplesDf2 = notRmSamplesDf2[notRmSamplesDf2$donor != "",]
notRmSamplesDf2$brain_region = sapply(notRmSamplesDf2$Final_breg, function(combo) {
ifelse(grepl(combo, pattern="BM-17"), "PVC",
ifelse(grepl(combo, pattern="BM-4"), "PMC",
ifelse(grepl(combo, pattern="10N"), "DMNX",
ifelse(grepl(combo, pattern="GPI", ignore.case=T), "GPI",
ifelse(grepl(combo, pattern="BM-9"), "PFC", combo)))))
})
notRmSamplesDf2 = notRmSamplesDf2[, c('final_vcfID', 'brain_region')]
notRmSamplesDf2 = notRmSamplesDf2[!duplicated(notRmSamplesDf2),]
}
allInfoDf$race
write.csv(allInfoDf[,c("brain_bank", "diagnosis_final", "sex", "race", "path_braak_lb", "age_at_baseline")], file = "R_plt_allInfoDf.csv", row.names = F)
write.csv(allInfo[,c("diagnosis_final", "path_braak_lb", "path_braak_nft")], file = "R_plt_allInfo.csv", row.names = F)
library(XLConnect)
library(ggplot2)
library(data.table)
library(ggpubr)
library(dplyr)
library(ggsci)
library(NbClust)
library(cluster)
library(factoextra)
library(UpSetR)
METADATA_PATH = file.path("metadata_final.xlsx")
DEMULTIPLEX_FILE_PATH = "conversion_vir_w_gt2_w_sex_161Pools_04112024_v3.tsv"
outDir = "output_dir"
dir.create(outDir)
mpdf = function(x, width=7,height=7, outDir=outDir, onefile=T)eval.parent(substitute({ pdf(paste0(outDir,"/plot_",make.names(x),".pdf"),useDingbats=F,width=width,height=height,onefile=onefile) })) #outDir must be defined as a global var
# Color functions
col_color_palette <- function(vals, grp_var, legend_show = TRUE){
if (class(vals) != 'factor') {
vals <- as.factor(vals)
}
# Remove the 'first' color (black) in this sequence - 'black' is reserved for text
my_colors <- palette.colors(nlevels(vals)+1, palette = "Okabe-Ito")
my_colors <- tail(my_colors, n=-1)
names(my_colors) <-levels(vals)
if (class(legend_show) == "character") {
return(scale_colour_manual(legend_show, name = grp_var,values = my_colors))
} else if (legend_show) {
return(scale_colour_manual(name = grp_var,values = my_colors))
} else {
return(scale_colour_manual("", name = grp_var,values = my_colors))
}
}
# Fill function
fill_color_palette <- function(vals, grp_var, legend_show = TRUE){
if (class(vals) != 'factor') {
vals <- as.factor(vals)
}
# Remove the 'first' color (black) in this sequence - 'black' is reserved for text
my_colors <- palette.colors(nlevels(vals)+1, palette = "Okabe-Ito")
my_colors <- tail(my_colors, n=-1)
names(my_colors) <-levels(vals)
if (legend_show) {
return(scale_fill_manual(name = grp_var,values = my_colors))
} else {
return(scale_fill_manual("", name = grp_var,values = my_colors))
}
}
{
######
# Brain bank color palette
br_bnk_color_pal <- col_color_palette(c("Harvard", "MSSM", "Udall", "UMBEB"), "brain_bank")
br_bnk_color_pal_noLeg <- col_color_palette(c("Harvard", "MSSM", "Udall", "UMBEB"), "brain_bank", legend_show = FALSE)
# Brain region color palette
br_reg_color_pal <- col_color_palette(c("DMNX", "GPI", "PMC", "PFC", "PVC"), "brain_region")
br_reg_color_pal_noLeg <- col_color_palette(c("DMNX", "GPI", "PMC", "PFC", "PVC"), "brain_region", legend_show = FALSE)
# Diagnosis color palette
diag_color_pal <- col_color_palette(c("Control", "PD or Parkinsonism"), "diagnosis_final")
diag_color_pal_noLeg <- col_color_palette(c("Control", "PD or Parkinsonism"), "diagnosis_final", legend_show = FALSE)
# Diagnosis color palette
sex_color_pal <- col_color_palette(c("Male", "Female"), "sex")
sex_color_pal_noLeg <- col_color_palette(c("Male", "Female"), "sex", legend_show = FALSE)
# Race color palette
race_color_pal <- col_color_palette(c("AFR", "AMR", "EUR", "SAS"), "race")
race_color_pal_noLeg <- col_color_palette(c("AFR", "AMR", "EUR", "SAS"), "race", legend_show = FALSE)
# Dissection status palette
dissect_color_pal <- col_color_palette(c("kept", "filtered", "removed"), "removed")
dissect_color_pal_noLeg <- col_color_palette(c("kept", "filtered", "removed"), "removed", legend_show = FALSE)
# Dissection status palette (v2)
dissect2_color_pal <- col_color_palette(c("kept", "filtered", "removed"), "dissections")
dissect2_color_pal_noLeg <- col_color_palette(c("kept", "filtered", "removed"), "dissections", legend_show = FALSE)
######
######
# Brain bank color palette
br_bnk_fill_pal <- fill_color_palette(c("Harvard", "MSSM", "Udall", "UMBEB"), "brain_bank")
br_bnk_fill_pal_noLeg <- fill_color_palette(c("Harvard", "MSSM", "Udall", "UMBEB"), "brain_bank", legend_show = FALSE)
# Brain region color palette
br_reg_fill_pal <- fill_color_palette(c("DMNX", "GPI", "PMC", "PFC", "PVC"), "brain_region")
br_reg_fill_pal_noLeg <- fill_color_palette(c("DMNX", "GPI", "PMC", "PFC", "PVC"), "brain_region", legend_show = FALSE)
# Diagnosis color palette
diag_fill_pal <- fill_color_palette(c("Control", "PD or Parkinsonism"), "diagnosis_final")
diag_fill_pal_noLeg <- fill_color_palette(c("Control", "PD or Parkinsonism"), "diagnosis_final", legend_show = FALSE)
# Diagnosis color palette
sex_fill_pal <- fill_color_palette(c("Male", "Female"), "sex")
sex_fill_pal_noLeg <- fill_color_palette(c("Male", "Female"), "sex", legend_show = FALSE)
# Race color palette
race_fill_pal <- fill_color_palette(c("AFR", "AMR", "EUR", "SAS"), "race")
race_fill_pal_noLeg <- fill_color_palette(c("AFR", "AMR", "EUR", "SAS"), "race", legend_show = FALSE)
# Dissection status palette
dissect_fill_pal <- fill_color_palette(c("kept", "filtered", "removed"), "removed")
dissect_fill_pal_noLeg <- fill_color_palette(c("kept", "filtered", "removed"), "removed", legend_show = FALSE)
# Dissection status palette (v2)
dissect2_fill_pal <- fill_color_palette(c("kept", "filtered", "removed"), "dissections")
dissect2_fill_pal_noLeg <- fill_color_palette(c("kept", "filtered", "removed"), "dissections", legend_show = FALSE)
######
}
{
# Clinical metadata
wb = loadWorkbook(METADATA_PATH)
cols = c("Demographics", "PD_Medical_History", "Epworth_Sleepiness_Scale", "Family_History_PD", "LBD_Cohort_Clinical_Data", "LBD_Cohort_Path_Data", "MDS_UPDRS_Part_I",
"MDS_UPDRS_Part_III", "MDS_UPDRS_Part_IV", "MMSE", "Modified_Schwab___England_ADL", "Smoking_and_alcohol_history", "UPDRS")
all_tabs = list()
for(col in cols) {
all_tabs[[col]] = readWorksheet(wb, sheet=col)
}
allInfo = data.table(cbind.data.frame(
all_tabs$Demographics,
do.call("rbind.data.frame", lapply(all_tabs$Demographics$participant_id, function(id) {
x = all_tabs$PD_Medical_History[all_tabs$PD_Medical_History$participant_id == id,]
x[order(x$visit_month, decreasing=T)[1],]
})),
do.call("rbind.data.frame", lapply(all_tabs$Demographics$participant_id, function(id) {
x = all_tabs$UPDRS[all_tabs$UPDRS$participant_id == id,]
x[order(x$visit_month, decreasing=T)[1],]
})),
do.call("rbind.data.frame", lapply(all_tabs$Demographics$participant_id, function(id) {
x = all_tabs$MDS_UPDRS_Part_III[all_tabs$MDS_UPDRS_Part_III$participant_id == id,]
x[order(x$visit_month, decreasing=T)[1],]
})),
all_tabs$LBD_Cohort_Path_Data[match(all_tabs$Demographics$participant_id,all_tabs$LBD_Cohort_Path_Data$participant_id),]
))
allInfo$path_braak_lb = as.numeric(ifelse(is.na(allInfo$path_braak_lb) | (allInfo$path_braak_lb == "NA"), 0, allInfo$path_braak_lb))
allInfo$brain_bank = as.factor(allInfo$brain_bank)
allInfo$diagnosis_final = ifelse(is.na(allInfo$diagnosis), allInfo$initial_diagnosis, allInfo$diagnosis)
allInfo$diagnosis_final = ifelse(allInfo$diagnosis_final == "No PD Nor Other Neurological Disorder", "Control", "PD or Parkinsonism")
allInfo$diagnosis_final = as.factor(allInfo$diagnosis_final)
allInfo$braak_email = as.numeric(ifelse(is.na(allInfo$path_braak_lb) | (allInfo$path_braak_lb == "NA"), 0, allInfo$path_braak_lb))
allInfo = allInfo[!is.na(allInfo$participant_id),]
allInfoDf = data.frame(allInfo)[,!duplicated(colnames(allInfo))]
allInfoDf = allInfoDf[!is.na(allInfoDf$participant_id),]
dim(allInfo)
######
# Remove the donors for which we don't have any participant
EXPORTED_SAMPLES_SNRNASEQ = "~/mnt/arion/projects/CommonMind/amppd/snRNAseq/metadata/snRNAseq_Data_Transfer_Manifest_snRNAseq_Individual.csv"
CONVERTER_IDS = "~/mnt/arion/projects/CommonMind/amppd/snRNAseq/metadata/snRNAseq_convertor_sampleNames.csv"
FINAL_H5AD_DF = "~/mnt/arion/projects/CommonMind/pnm/AMP_PD/Tereza_AllSamp_04112024.csv"
exportedSnrnaseqSamples = read.csv(EXPORTED_SAMPLES_SNRNASEQ)
unique(exportedSnrnaseqSamples$AMP.PD.Participant.ID)
convertorsIds = read.csv(CONVERTER_IDS)
unique(exportedSnrnaseqSamples$AMP.PD.Participant.ID)
allowed = read.csv(FINAL_H5AD_DF)
unique(allowed$participant_id)
allInfo$participant_id_amppd = convertorsIds[match(allInfo$participant_id, convertorsIds$participant_id), "participant_id.1"]
allInfo = allInfo[allInfo$participant_id_amppd %in% unique(allowed$participant_id),]
######
# Alignment/demultiplexing metadata
notRmSamplesDf = read.csv(DEMULTIPLEX_FILE_PATH, sep="\t")
notRmSamplesDf = notRmSamplesDf[notRmSamplesDf$donor != "",]
notRmSamplesDf$combo = paste0(notRmSamplesDf$final_vcfID, "_", notRmSamplesDf$Final_breg)
notRmSamplesDf = do.call("rbind.data.frame", lapply(unique(notRmSamplesDf$combo), function(x) { c(x, sum(notRmSamplesDf[notRmSamplesDf$combo==x,"cell_counts"])) }))
colnames(notRmSamplesDf) = c("combo", "cell_count")
notRmSamplesDf$cell_count = as.numeric(notRmSamplesDf$cell_count)
# notRmSamplesDf$removed = "FALSE"
notRmSamplesDf$removed = "kept"
notRmSamplesDf$brain_region = sapply(notRmSamplesDf$combo, function(combo) { ifelse(grepl(combo, pattern="BM-17"), "PVC", ifelse(grepl(combo, pattern="BM-4"),
"PMC", ifelse(grepl(combo, pattern="10N"), "DMNX", ifelse(grepl(combo, pattern="GPI", ignore.case=T), "GPI", ifelse(grepl(combo, pattern="BM-9"), "PFC", combo))))) })
rmSamplesDf = read.csv(DEMULTIPLEX_FILE_PATH, sep="\t")
rmSamplesDf = rmSamplesDf[rmSamplesDf$donor == "",]
#hist(rmSamplesDf$cell_counts, breaks=50)
rmSamplesDf$combo = paste0(rmSamplesDf$final_vcfID, "_", rmSamplesDf$Final_breg)
rmSamplesDf = do.call("rbind.data.frame", lapply(unique(rmSamplesDf$combo), function(x) { c(x, sum(rmSamplesDf[rmSamplesDf$combo==x,"vir_res"])) }))
colnames(rmSamplesDf) = c("combo", "cell_count")
# rmSamplesDf$removed = "TRUE"
rmSamplesDf$removed = "removed"
rmSamplesDf$brain_region = sapply(rmSamplesDf$combo, function(combo) { ifelse(grepl(combo, pattern="BM-17"), "PVC", ifelse(grepl(combo, pattern="BM-4"),
"PMC", ifelse(grepl(combo, pattern="10N"), "DMNX", ifelse(grepl(combo, pattern="GPI", ignore.case=T), "GPI", ifelse(grepl(combo, pattern="BM-9"), "PFC", combo))))) })
filtSamplesDf = read.csv(DEMULTIPLEX_FILE_PATH, sep="\t")
filtSamplesDf = filtSamplesDf[filtSamplesDf$donor != "",]
#hist(filtSamplesDf$cell_counts, breaks=50)
filtSamplesDf$combo = paste0(filtSamplesDf$final_vcfID, "_", filtSamplesDf$Final_breg)
filtSamplesDf = do.call("rbind.data.frame", lapply(unique(filtSamplesDf$combo), function(x) { c(x, sum(filtSamplesDf[filtSamplesDf$combo==x,"Lost_cells"])) }))
colnames(filtSamplesDf) = c("combo", "cell_count")
filtSamplesDf$removed = "filtered"
filtSamplesDf$brain_region = sapply(filtSamplesDf$combo, function(combo) { ifelse(grepl(combo, pattern="BM-17"), "PVC", ifelse(grepl(combo, pattern="BM-4"),
"PMC", ifelse(grepl(combo, pattern="10N"), "DMNX", ifelse(grepl(combo, pattern="GPI", ignore.case=T), "GPI", ifelse(grepl(combo, pattern="BM-9"), "PFC", combo))))) })
# For UPSET PLOT
notRmSamplesDf2 = read.csv(DEMULTIPLEX_FILE_PATH, sep="\t")
notRmSamplesDf2 = notRmSamplesDf2[notRmSamplesDf2$donor != "",]
notRmSamplesDf2$brain_region = sapply(notRmSamplesDf2$Final_breg, function(combo) {
ifelse(grepl(combo, pattern="BM-17"), "PVC",
ifelse(grepl(combo, pattern="BM-4"), "PMC",
ifelse(grepl(combo, pattern="10N"), "DMNX",
ifelse(grepl(combo, pattern="GPI", ignore.case=T), "GPI",
ifelse(grepl(combo, pattern="BM-9"), "PFC", combo)))))
})
notRmSamplesDf2 = notRmSamplesDf2[, c('final_vcfID', 'brain_region')]
notRmSamplesDf2 = notRmSamplesDf2[!duplicated(notRmSamplesDf2),]
}
# Plot: Samples by brain bank
# To include the 'removed' 3 donors
# used allInfoDf rather than allInfo
# df = allInfo[, .N, by = brain_bank]
df = allInfoDf %>% count(brain_bank)
df
library(XLConnect)
library(ggplot2)
library(data.table)
library(ggpubr)
library(dplyr)
library(ggsci)
library(NbClust)
library(cluster)
library(factoextra)
library(UpSetR)
setwd("../latest_Github/AMP-PD_SciData/")
dry_lab_dir = "dry_lab/"
wet_lab_dir = "wet_lab/"
outDir = "output_dir"
dir.create(outDir)
mpdf = function(x, width=7,height=7, outDir=outDir, onefile=T)eval.parent(substitute({ pdf(paste0(outDir,"/plot_",make.names(x),".pdf"),useDingbats=F,width=width,height=height,onefile=onefile) })) #outDir must be defined as a global var
col_color_palette <- function(vals, grp_var, legend_show = TRUE){
if (class(vals) != 'factor') {
vals <- as.factor(vals)
}
# Remove the 'first' color (black) in this sequence - 'black' is reserved for text
my_colors <- palette.colors(nlevels(vals)+1, palette = "Okabe-Ito")
my_colors <- tail(my_colors, n=-1)
names(my_colors) <-levels(vals)
if (class(legend_show) == "character") {
return(scale_colour_manual(legend_show, name = grp_var,values = my_colors))
} else if (legend_show) {
return(scale_colour_manual(name = grp_var,values = my_colors))
} else {
return(scale_colour_manual("", name = grp_var,values = my_colors))
}
}
# Fill function
fill_color_palette <- function(vals, grp_var, legend_show = TRUE){
if (class(vals) != 'factor') {
vals <- as.factor(vals)
}
# Remove the 'first' color (black) in this sequence - 'black' is reserved for text
my_colors <- palette.colors(nlevels(vals)+1, palette = "Okabe-Ito")
my_colors <- tail(my_colors, n=-1)
names(my_colors) <-levels(vals)
if (legend_show) {
return(scale_fill_manual(name = grp_var,values = my_colors))
} else {
return(scale_fill_manual("", name = grp_var,values = my_colors))
}
}
{
######
# Brain bank color palette
br_bnk_color_pal <- col_color_palette(c("Harvard", "MSSM", "Udall", "UMBEB"), "brain_bank")
br_bnk_color_pal_noLeg <- col_color_palette(c("Harvard", "MSSM", "Udall", "UMBEB"), "brain_bank", legend_show = FALSE)
# Brain region color palette
br_reg_color_pal <- col_color_palette(c("DMNX", "GPI", "PMC", "PFC", "PVC"), "brain_region")
br_reg_color_pal_noLeg <- col_color_palette(c("DMNX", "GPI", "PMC", "PFC", "PVC"), "brain_region", legend_show = FALSE)
# Diagnosis color palette
diag_color_pal <- col_color_palette(c("Control", "PD or Parkinsonism"), "diagnosis_final")
diag_color_pal_noLeg <- col_color_palette(c("Control", "PD or Parkinsonism"), "diagnosis_final", legend_show = FALSE)
# Diagnosis color palette
sex_color_pal <- col_color_palette(c("Male", "Female"), "sex")
sex_color_pal_noLeg <- col_color_palette(c("Male", "Female"), "sex", legend_show = FALSE)
# Race color palette
race_color_pal <- col_color_palette(c("AFR", "AMR", "EUR", "SAS"), "race")
race_color_pal_noLeg <- col_color_palette(c("AFR", "AMR", "EUR", "SAS"), "race", legend_show = FALSE)
# Dissection status palette
dissect_color_pal <- col_color_palette(c("kept", "filtered", "removed"), "removed")
dissect_color_pal_noLeg <- col_color_palette(c("kept", "filtered", "removed"), "removed", legend_show = FALSE)
# Dissection status palette (v2)
dissect2_color_pal <- col_color_palette(c("kept", "filtered", "removed"), "dissections")
dissect2_color_pal_noLeg <- col_color_palette(c("kept", "filtered", "removed"), "dissections", legend_show = FALSE)
######
######
# Brain bank color palette
br_bnk_fill_pal <- fill_color_palette(c("Harvard", "MSSM", "Udall", "UMBEB"), "brain_bank")
br_bnk_fill_pal_noLeg <- fill_color_palette(c("Harvard", "MSSM", "Udall", "UMBEB"), "brain_bank", legend_show = FALSE)
# Brain region color palette
br_reg_fill_pal <- fill_color_palette(c("DMNX", "GPI", "PMC", "PFC", "PVC"), "brain_region")
br_reg_fill_pal_noLeg <- fill_color_palette(c("DMNX", "GPI", "PMC", "PFC", "PVC"), "brain_region", legend_show = FALSE)
# Diagnosis color palette
diag_fill_pal <- fill_color_palette(c("Control", "PD or Parkinsonism"), "diagnosis_final")
diag_fill_pal_noLeg <- fill_color_palette(c("Control", "PD or Parkinsonism"), "diagnosis_final", legend_show = FALSE)
# Diagnosis color palette
sex_fill_pal <- fill_color_palette(c("Male", "Female"), "sex")
sex_fill_pal_noLeg <- fill_color_palette(c("Male", "Female"), "sex", legend_show = FALSE)
# Race color palette
race_fill_pal <- fill_color_palette(c("AFR", "AMR", "EUR", "SAS"), "race")
race_fill_pal_noLeg <- fill_color_palette(c("AFR", "AMR", "EUR", "SAS"), "race", legend_show = FALSE)
# Dissection status palette
dissect_fill_pal <- fill_color_palette(c("kept", "filtered", "removed"), "removed")
dissect_fill_pal_noLeg <- fill_color_palette(c("kept", "filtered", "removed"), "removed", legend_show = FALSE)
# Dissection status palette (v2)
dissect2_fill_pal <- fill_color_palette(c("kept", "filtered", "removed"), "dissections")
dissect2_fill_pal_noLeg <- fill_color_palette(c("kept", "filtered", "removed"), "dissections", legend_show = FALSE)
######
}
allInfo = read.csv(file.path(wet_lab_dir, "R_plt_allInfo.csv"))
allInfoDf = read.csv(file.path(wet_lab_dir, "R_plt_allInfoDf.csv"))
upset_input = read.csv(file.path(dry_lab_dir, "R_UpSetPlot_input_NoPersIdent.csv"))
notRmDf = read.csv(file.path(dry_lab_dir, "R_plt_notRmdf_NoPersIdent.csv"))
rboundDf = read.csv(file.path(dry_lab_dir, "R_plt_3rbinddf_NoPersIdent.csv"))
df = allInfoDf %>% count(brain_bank)
df$labs = paste0(df$brain_bank, " (", df$n/sum(df$n)*100, "%)")
myPlot = ggpie(df, "n", fill="brain_bank", lab.pos="in") + ggtitle("Brain bank")
myPlot + br_bnk_fill_pal
df
?ggpie
df$brain_bank
class(df)
level(df$brain_bank)
df$brain_bank <- as.factor(df$brain_bank)
df$brain_bank <- ordered(df$brain_bank, levels=c("Harvard", "MSSM", "Udall", "UMBEB"))
df = allInfoDf %>% count(brain_bank)
df$labs = paste0(df$brain_bank, " (", df$n/sum(df$n)*100, "%)")
myPlot = ggpie(df, "n", fill="brain_bank", lab.pos="in") + ggtitle("Brain bank")
myPlot + br_bnk_fill_pal
df$brain_bank
type(df$brain_bank)
class(df$brain_bank)
df = allInfoDf %>% count(brain_bank)
df$labs = paste0(df$brain_bank, " (", df$n/sum(df$n)*100, "%)")
df$brain_bank <- ordered(df$brain_bank, levels=c("Harvard", "MSSM", "Udall", "UMBEB"))
myPlot = ggpie(df, "n", fill="brain_bank", lab.pos="in") + ggtitle("Brain bank")
myPlot + br_bnk_fill_pal
